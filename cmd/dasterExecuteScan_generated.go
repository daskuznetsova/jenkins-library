// Code generated by piper's step-generator. DO NOT EDIT.

package cmd

import (
	"fmt"
	"os"
	"time"

	"github.com/SAP/jenkins-library/pkg/config"
	"github.com/SAP/jenkins-library/pkg/log"
	"github.com/SAP/jenkins-library/pkg/splunk"
	"github.com/SAP/jenkins-library/pkg/telemetry"
	"github.com/SAP/jenkins-library/pkg/validation"
	"github.com/spf13/cobra"
)

type dasterExecuteScanOptions struct {
	ClientID        string                 `json:"clientId,omitempty"`
	ClientSecret    string                 `json:"clientSecret,omitempty"`
	UserCredentials string                 `json:"userCredentials,omitempty"`
	DasterToken     string                 `json:"dasterToken,omitempty"`
	User            string                 `json:"user,omitempty"`
	Password        string                 `json:"password,omitempty"`
	TargetURL       string                 `json:"targetUrl,omitempty"`
	MaxRetries      int                    `json:"maxRetries,omitempty"`
	OAuthGrantType  string                 `json:"oAuthGrantType,omitempty"`
	OAuthSource     string                 `json:"oAuthSource,omitempty"`
	OAuthServiceURL string                 `json:"oAuthServiceUrl,omitempty"`
	Synchronous     bool                   `json:"synchronous,omitempty"`
	ScanType        string                 `json:"scanType,omitempty" validate:"possible-values=fioriDASTScan oDataFuzzer"`
	Settings        map[string]interface{} `json:"settings,omitempty"`
	DeleteScan      bool                   `json:"deleteScan,omitempty"`
	ServiceURL      string                 `json:"serviceUrl,omitempty"`
	Thresholds      string                 `json:"thresholds,omitempty"`
	Verbose         bool                   `json:"verbose,omitempty"`
}

// DasterExecuteScanCommand **D**ynamic **A**pplication **S**ecurity **T**esting.
func DasterExecuteScanCommand() *cobra.Command {
	const STEP_NAME = "dasterExecuteScan"

	metadata := dasterExecuteScanMetadata()
	var stepConfig dasterExecuteScanOptions
	var startTime time.Time
	var logCollector *log.CollectorHook
	var splunkClient *splunk.Splunk
	telemetryClient := &telemetry.Telemetry{}

	var createDasterExecuteScanCmd = &cobra.Command{
		Use:   STEP_NAME,
		Short: "**D**ynamic **A**pplication **S**ecurity **T**esting.",
		Long: `The name DASTer is derived from **D**ynamic **A**pplication **S**ecurity **T**esting. As the name implies, the tool targets to provide black-box security testing capabilities for your solutions in an automated fashion.
DASTer itself ships with a [Swagger based frontend](https://daster.tools.sap/api-spec/viewer/) and a [Web UI](https://app.daster.tools.sap/ui5/) to generate tokens
required to record your consent and to authenticate. Please see the [documentation](https://github.wdf.sap.corp/pages/Security-Testing/doc/daster/) for
background information about the tool, its usage scenarios and channels to report problems.`,
		PreRunE: func(cmd *cobra.Command, _ []string) error {
			startTime = time.Now()
			log.SetStepName(STEP_NAME)
			log.SetVerbose(GeneralConfig.Verbose)

			GeneralConfig.GitHubAccessTokens = ResolveAccessTokens(GeneralConfig.GitHubTokens)

			path, _ := os.Getwd()
			fatalHook := &log.FatalHook{CorrelationID: GeneralConfig.CorrelationID, Path: path}
			log.RegisterHook(fatalHook)

			err := PrepareConfig(cmd, &metadata, STEP_NAME, &stepConfig, config.OpenPiperFile)
			if err != nil {
				log.SetErrorCategory(log.ErrorConfiguration)
				return err
			}
			log.RegisterSecret(stepConfig.ClientID)
			log.RegisterSecret(stepConfig.ClientSecret)
			log.RegisterSecret(stepConfig.UserCredentials)
			log.RegisterSecret(stepConfig.DasterToken)
			log.RegisterSecret(stepConfig.User)
			log.RegisterSecret(stepConfig.Password)

			if len(GeneralConfig.HookConfig.SentryConfig.Dsn) > 0 {
				sentryHook := log.NewSentryHook(GeneralConfig.HookConfig.SentryConfig.Dsn, GeneralConfig.CorrelationID)
				log.RegisterHook(&sentryHook)
			}

			if len(GeneralConfig.HookConfig.SplunkConfig.Dsn) > 0 || len(GeneralConfig.HookConfig.SplunkConfig.ProdCriblEndpoint) > 0 {
				splunkClient = &splunk.Splunk{}
				logCollector = &log.CollectorHook{CorrelationID: GeneralConfig.CorrelationID}
				log.RegisterHook(logCollector)
			}

			if err = log.RegisterANSHookIfConfigured(GeneralConfig.CorrelationID); err != nil {
				log.Entry().WithError(err).Warn("failed to set up SAP Alert Notification Service log hook")
			}

			validation, err := validation.New(validation.WithJSONNamesForStructFields(), validation.WithPredefinedErrorMessages())
			if err != nil {
				return err
			}
			if err = validation.ValidateStruct(stepConfig); err != nil {
				log.SetErrorCategory(log.ErrorConfiguration)
				return err
			}

			return nil
		},
		Run: func(_ *cobra.Command, _ []string) {
			stepTelemetryData := telemetry.CustomData{}
			stepTelemetryData.ErrorCode = "1"
			handler := func() {
				config.RemoveVaultSecretFiles()
				stepTelemetryData.Duration = fmt.Sprintf("%v", time.Since(startTime).Milliseconds())
				stepTelemetryData.ErrorCategory = log.GetErrorCategory().String()
				stepTelemetryData.PiperCommitHash = GitCommit
				telemetryClient.SetData(&stepTelemetryData)
				telemetryClient.Send()
				if len(GeneralConfig.HookConfig.SplunkConfig.Dsn) > 0 {
					splunkClient.Initialize(GeneralConfig.CorrelationID,
						GeneralConfig.HookConfig.SplunkConfig.Dsn,
						GeneralConfig.HookConfig.SplunkConfig.Token,
						GeneralConfig.HookConfig.SplunkConfig.Index,
						GeneralConfig.HookConfig.SplunkConfig.SendLogs)
					splunkClient.Send(telemetryClient.GetData(), logCollector)
				}
				if len(GeneralConfig.HookConfig.SplunkConfig.ProdCriblEndpoint) > 0 {
					splunkClient.Initialize(GeneralConfig.CorrelationID,
						GeneralConfig.HookConfig.SplunkConfig.ProdCriblEndpoint,
						GeneralConfig.HookConfig.SplunkConfig.ProdCriblToken,
						GeneralConfig.HookConfig.SplunkConfig.ProdCriblIndex,
						GeneralConfig.HookConfig.SplunkConfig.SendLogs)
					splunkClient.Send(telemetryClient.GetData(), logCollector)
				}
			}
			log.DeferExitHandler(handler)
			defer handler()
			telemetryClient.Initialize(GeneralConfig.NoTelemetry, STEP_NAME, GeneralConfig.HookConfig.PendoConfig.Token)
			dasterExecuteScan(stepConfig, &stepTelemetryData)
			stepTelemetryData.ErrorCode = "0"
			log.Entry().Info("SUCCESS")
		},
	}

	addDasterExecuteScanFlags(createDasterExecuteScanCmd, &stepConfig)
	return createDasterExecuteScanCmd
}

func addDasterExecuteScanFlags(cmd *cobra.Command, stepConfig *dasterExecuteScanOptions) {
	cmd.Flags().StringVar(&stepConfig.ClientID, "clientId", os.Getenv("PIPER_clientId"), "client_id to fetch an oAuth token for FioriDAST service testing.")
	cmd.Flags().StringVar(&stepConfig.ClientSecret, "clientSecret", os.Getenv("PIPER_clientSecret"), "client_secret to fetch an oAuth token for FioriDAST service testing.")
	cmd.Flags().StringVar(&stepConfig.UserCredentials, "userCredentials", os.Getenv("PIPER_userCredentials"), "user token")
	cmd.Flags().StringVar(&stepConfig.DasterToken, "dasterToken", os.Getenv("PIPER_dasterToken"), "daster token")
	cmd.Flags().StringVar(&stepConfig.User, "user", os.Getenv("PIPER_user"), "target user.")
	cmd.Flags().StringVar(&stepConfig.Password, "password", os.Getenv("PIPER_password"), "target password.")
	cmd.Flags().StringVar(&stepConfig.TargetURL, "targetUrl", os.Getenv("PIPER_targetUrl"), "target url.")
	cmd.Flags().IntVar(&stepConfig.MaxRetries, "maxRetries", 0, "Number of retries to be attempted in case of HTTP connection instability.")
	cmd.Flags().StringVar(&stepConfig.OAuthGrantType, "oAuthGrantType", os.Getenv("PIPER_oAuthGrantType"), "The grant type to use for fetching the token.")
	cmd.Flags().StringVar(&stepConfig.OAuthSource, "oAuthSource", os.Getenv("PIPER_oAuthSource"), "The source used to fetch the token.")
	cmd.Flags().StringVar(&stepConfig.OAuthServiceURL, "oAuthServiceUrl", os.Getenv("PIPER_oAuthServiceUrl"), "The URL to the XSUAA used for fetching the token.")
	cmd.Flags().BoolVar(&stepConfig.Synchronous, "synchronous", false, "Whether to use the step in a synchronous or asynchronous mode.")
	cmd.Flags().StringVar(&stepConfig.ScanType, "scanType", os.Getenv("PIPER_scanType"), "The type of DASTer scan to trigger which actually corresponds to the API endpoints i.e. `'basicScan'`")

	cmd.Flags().BoolVar(&stepConfig.DeleteScan, "deleteScan", false, "Whether to finally delete the scan or not only supported for `fioriDASTScan`.")
	cmd.Flags().StringVar(&stepConfig.ServiceURL, "serviceUrl", os.Getenv("PIPER_serviceUrl"), "The URL to DASTer.")
	cmd.Flags().StringVar(&stepConfig.Thresholds, "thresholds", os.Getenv("PIPER_thresholds"), "The thresholds used to fail the build.")
	cmd.Flags().BoolVar(&stepConfig.Verbose, "verbose", false, "Verbose")

	cmd.MarkFlagRequired("clientId")
	cmd.MarkFlagRequired("clientSecret")
	cmd.MarkFlagRequired("userCredentials")
	cmd.MarkFlagRequired("dasterToken")
	cmd.MarkFlagRequired("user")
	cmd.MarkFlagRequired("password")
}

// retrieve step metadata
func dasterExecuteScanMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:        "dasterExecuteScan",
			Aliases:     []config.Alias{},
			Description: "**D**ynamic **A**pplication **S**ecurity **T**esting.",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Secrets: []config.StepSecrets{
					{Name: "oAuthCredentialsId", Description: "ID referencing a user/pwd credentials to fetch an oAuth token for FioriDAST service testing, please encode client_id as username and client_secret as password.", Type: "jenkins"},
					{Name: "dasterTokenCredentialsId", Description: "daster token", Type: "jenkins"},
					{Name: "userCredentialsId", Description: "token", Type: "jenkins"},
					{Name: "targetAuthCredentialsId", Description: "user/password", Type: "jenkins"},
				},
				Resources: []config.StepResources{
					{Name: "commonPipelineEnvironment"},
					{Name: "buildDescriptor", Type: "stash"},
					{Name: "tests", Type: "stash"},
				},
				Parameters: []config.StepParameters{
					{
						Name: "clientId",
						ResourceRef: []config.ResourceReference{
							{
								Name:  "oAuthCredentialsId",
								Param: "clientId",
								Type:  "secret",
							},

							{
								Name:    "dasterVaultSecretName",
								Type:    "vaultSecret",
								Default: "daster",
							},
						},
						Scope:     []string{"GENERAL", "PARAMETERS", "STAGES", "STEPS"},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_clientId"),
					},
					{
						Name: "clientSecret",
						ResourceRef: []config.ResourceReference{
							{
								Name:  "oAuthCredentialsId",
								Param: "clientSecret",
								Type:  "secret",
							},

							{
								Name:    "dasterVaultSecretName",
								Type:    "vaultSecret",
								Default: "daster",
							},
						},
						Scope:     []string{"GENERAL", "PARAMETERS", "STAGES", "STEPS"},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_clientSecret"),
					},
					{
						Name: "userCredentials",
						ResourceRef: []config.ResourceReference{
							{
								Name: "userCredentialsId",
								Type: "secret",
							},

							{
								Name:    "dasterVaultSecretName",
								Type:    "vaultSecret",
								Default: "userCredentialsId",
							},
						},
						Scope:     []string{"GENERAL", "PARAMETERS", "STAGES", "STEPS"},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_userCredentials"),
					},
					{
						Name: "dasterToken",
						ResourceRef: []config.ResourceReference{
							{
								Name: "dasterTokenCredentialsId",
								Type: "secret",
							},

							{
								Name:    "dasterVaultSecretName",
								Type:    "vaultSecret",
								Default: "daster",
							},
						},
						Scope:     []string{"GENERAL", "PARAMETERS", "STAGES", "STEPS"},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_dasterToken"),
					},
					{
						Name: "user",
						ResourceRef: []config.ResourceReference{
							{
								Name:  "targetAuthCredentialsId",
								Param: "user",
								Type:  "secret",
							},

							{
								Name:    "dasterVaultSecretName",
								Type:    "vaultSecret",
								Default: "daster",
							},
						},
						Scope:     []string{"GENERAL", "PARAMETERS", "STAGES", "STEPS"},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_user"),
					},
					{
						Name: "password",
						ResourceRef: []config.ResourceReference{
							{
								Name:  "targetAuthCredentialsId",
								Param: "password",
								Type:  "secret",
							},

							{
								Name:    "dasterVaultSecretName",
								Type:    "vaultSecret",
								Default: "daster",
							},
						},
						Scope:     []string{"GENERAL", "PARAMETERS", "STAGES", "STEPS"},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_password"),
					},
					{
						Name:        "targetUrl",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_targetUrl"),
					},
					{
						Name:        "maxRetries",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "int",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     0,
					},
					{
						Name:        "oAuthGrantType",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_oAuthGrantType"),
					},
					{
						Name:        "oAuthSource",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_oAuthSource"),
					},
					{
						Name:        "oAuthServiceUrl",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_oAuthServiceUrl"),
					},
					{
						Name:        "synchronous",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "bool",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     false,
					},
					{
						Name:        "scanType",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_scanType"),
					},
					{
						Name:        "settings",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "map[string]interface{}",
						Mandatory:   false,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "deleteScan",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "bool",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     false,
					},
					{
						Name:        "serviceUrl",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_serviceUrl"),
					},
					{
						Name:        "thresholds",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_thresholds"),
					},
					{
						Name:        "verbose",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "bool",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     false,
					},
				},
			},
			Containers: []config.Container{
				{},
			},
		},
	}
	return theMetaData
}
